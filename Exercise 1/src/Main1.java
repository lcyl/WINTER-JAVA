//=========================================================================
// JAVA 객체지향
// - 클래스 만들기
// - 프로그램 소스의 단위가 클래스 단위로 구현
//=========================================================================
// 객체지향의 3요소
// 1. 캡슐화
// 2. 상속
// 3. 다형
//=========================================================================
// 데이터 추상 : 추상의 자료형 표현 !!
// 추상화 : 현실세계에 존재하는 객체를 관찰하여 소스코드로 표현 !!
//=========================================================================
// 데이터 타입 : 저장하고자하는 데이터의 성질
// ex) 나이 : 숫자, 양수
//     int, age ;    --> 변수 !!
//     이름 : 문자열
//     string name ; --> 변수 !!
//=========================================================================
// 복합 데이터의 표현 !!
//  사람, 학생 : 숫자로 표현 가능하나 ??
// --> 이름, 학번, 학과, 학년, 성적....
//=========================================================================
// 사용자 정의 데이터 타입 : 기본타입의 조합을 통해서 새로운 타입을 생성 !!
// --> 복잡한 데이터를 표현하기 위해 여러 변수들의 집합으로 구성
// java : class 문법 제공 !!
//=========================================================================
// 추상화 : 모든 프로그래밍의 공통 !!
// --> 사용자 정의 데이타 타입을 만들기위해 추상화 기법을 적용 !!
// --> c언어 : 속성값들만 추상화 !!
// 속성 : 객체가 지닌것들중에 정량적인 수치로 표현 가능한것
// 객체지향 언어
// --> 속성 + 행동을 추상화 시킨다.
// 사람
//   속성 : 이름, 성별, 나이 ....
//   행동 : 걷다, 먹다, 자다 ....
//=========================================================================
// 객체 추상화
// --> 현실세계에 존재하는 객체를 관찰하여....
// --> 프로그램에서 필요한 속성과 행동을 추출하여 표현하는 것 !!
//=========================================================================
// ex) 자동차
//      속성 : 차량번호, 배기량, 승차정원, 색상....
//      행동 : aceel, break, ....
// ex)
// 1) 상품
// 속성 : 가격, 모양, 냄새
// 행동 : 판매, 입고, 환불
// 2) 태풍
// 속성 : 이름, 번호, 풍속, 기간
// 행동 : 소멸, 이동
// 3) 강의
// 속성 : 가격, 강사, 기간, 수강생, 내용
// 행동 : 시작, 종료, 평가
// 4) 예약
// 속성 : 가격, 날짜, 대상
// 행동 : 취소, 예약, 변경, 조회
// 5) 책
// 속성 : 저자, 제목, 출판사
// 행동 : 펼치기, 덮기, 다음장 이동, 이전장 이동
//=========================================================================
// class : 추상화된 객체를 java 언어에서 표현하기 위한 방법 !!
// --> class를 통해 객체를 표현
// --> 사용자 정의 데이타 타입
//=========================================================================
// 접근 지정자 : private, public, protected
// --> 클래스의 멤버들을 외부에서 접근을 지정하는것 !!
//=========================================================================
// private : 클래스의 멤버에 접금을 금지 !!
// public  : 누구든 접근 가능 !!
// default : 같은 패키지에서만 접근 가능 !!

// 일반적인 클래스 디자인 규칙 !!
// 속성은 private로 만들어 무분별한 변경/접근을 금지
// public한 행동을 통해 속성의 값을 변경

public class product2
{

    private int pcode;
    private String pname;
    private int price;
    private int pcount;

    public product2(){}
    {
        System.out.println("product2() 호출 됨");
    }
    // 메소드오버로딩 : 같은 이름의 함수가 여러개 존재 !! 단, 매개변수 정보가 달라야함 !

    // 생성자
    //--> 객체가 생성될 때(new) 자동으로 호출되서 객체의 멤버 변수를 초기화
    //--> 1) 클래스와 이름이 동일
    //--> 2) 일반적인 경우에 public으로 작성 --> private 객체생성 불가 !!
    public product2(int pcode, String pname, int price, int pcount){}
    {
       this.pcode = pcode;
       this.pname = pname;
       this.price = price;
       this.pcount = pcount;
    }

    public int getPcode(){return pcode;}
    public String setpname(String newpname) { pname = newpname; }
    public String getPname() { return pname; }
    public int getPrice() { return price; }
    public void setPrice(int price) { if( price >0 ) this.price = price; }
    public int getPcount() { return pcount; }
    public void setPcount(int pcount) { if(pcount > 0) this.pcount = pcount; }

    public void sell(){}

}

public class Main1 {

    public static void main(String[] args)
    {
        //클래스 타입의 변수 : 객체 (인스턴스)
        product2 p1 = new product2( 4885, "가습기", 90000, 3);  // new는 객체를 생성할때의 키워드
        //pcode는 어떻게 초기화? ( 생성자로 초기화 !)
        //p1.setpname("가습기");
       // p1.setPrice(80000);
        //p1.setPcount(5);
        System.out.println( p1.getPcode());
    }
}
